/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.44
 * Generated at: 2017-07-19 02:11:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.cafe;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class insertform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/ncs03/web_work/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Step22_SmartEditor/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1500253144000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>views/cafe/insertform.jsp</title>\r\n");
      out.write("<!-- SmartEditor 관련 javascript 로딩 -->\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/\r\n");
      out.write("\tSmartEditor/js/HuskyEZCreator.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>카페 새글 입력 페이지 입니다.</h3>\r\n");
      out.write("<form action=\"insert.do\" method=\"post\">\r\n");
      out.write("\t작성자<input type=\"text\" name=\"writer\"/><br/>\r\n");
      out.write("\t제목 <input type=\"text\" name=\"title\"/><br/>\r\n");
      out.write("\t<textarea name=\"ir1\" id=\"ir1\" style=\"width:766px;height:412px;display:none\"></textarea>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<input type=\"button\" onclick=\"pasteHTML();\" value=\"본문에 내용 넣기\" />\r\n");
      out.write("\t\t<input type=\"button\" onclick=\"showHTML();\" value=\"본문 내용 가져오기\" />\r\n");
      out.write("\t\t<input type=\"button\" onclick=\"submitContents(this);\" value=\"서버로 내용 전송\" />\r\n");
      out.write("\t\t<input type=\"button\" onclick=\"setDefaultFont();\" value=\"기본 폰트 지정하기 (궁서_24)\" />\r\n");
      out.write("\t</div>\r\n");
      out.write("</form>\r\n");
      out.write("<script>\r\n");
      out.write("var oEditors = [];\r\n");
      out.write("\r\n");
      out.write("//추가 글꼴 목록\r\n");
      out.write("//var aAdditionalFontSet = [[\"MS UI Gothic\", \"MS UI Gothic\"], [\"Comic Sans MS\", \"Comic Sans MS\"],[\"TEST\",\"TEST\"]];\r\n");
      out.write("\r\n");
      out.write("nhn.husky.EZCreator.createInIFrame({\r\n");
      out.write("\toAppRef: oEditors,\r\n");
      out.write("\telPlaceHolder: \"ir1\",\r\n");
      out.write("\tsSkinURI: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/SmartEditor/SmartEditor2Skin.html\",\t\r\n");
      out.write("\thtParams : {\r\n");
      out.write("\t\tbUseToolbar : true,\t\t\t\t// 툴바 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\tbUseVerticalResizer : true,\t\t// 입력창 크기 조절바 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\tbUseModeChanger : true,\t\t\t// 모드 탭(Editor | HTML | TEXT) 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\t//aAdditionalFontList : aAdditionalFontSet,\t\t// 추가 글꼴 목록\r\n");
      out.write("\t\tfOnBeforeUnload : function(){\r\n");
      out.write("\t\t\t//alert(\"완료!\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}, //boolean\r\n");
      out.write("\tfOnAppLoad : function(){\r\n");
      out.write("\t\t//예제 코드\r\n");
      out.write("\t\t//oEditors.getById[\"ir1\"].exec(\"PASTE_HTML\", [\"로딩이 완료된 후에 본문에 삽입되는 text입니다.\"]);\r\n");
      out.write("\t},\r\n");
      out.write("\tfCreator: \"createSEditor2\"\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function pasteHTML() {\r\n");
      out.write("\tvar sHTML = \"<span style='color:#FF0000;'>이미지도 같은 방식으로 삽입합니다.<\\/span>\";\r\n");
      out.write("\toEditors.getById[\"ir1\"].exec(\"PASTE_HTML\", [sHTML]);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function showHTML() {\r\n");
      out.write("\tvar sHTML = oEditors.getById[\"ir1\"].getIR();\r\n");
      out.write("\talert(sHTML);\r\n");
      out.write("}\r\n");
      out.write("\t\r\n");
      out.write("function submitContents(elClickedObj) {\r\n");
      out.write("\toEditors.getById[\"ir1\"].exec(\"UPDATE_CONTENTS_FIELD\", []);\t// 에디터의 내용이 textarea에 적용됩니다.\r\n");
      out.write("\t\r\n");
      out.write("\t// 에디터의 내용에 대한 값 검증은 이곳에서 document.getElementById(\"ir1\").value를 이용해서 처리하면 됩니다.\r\n");
      out.write("\t\r\n");
      out.write("\ttry {\r\n");
      out.write("\t\telClickedObj.form.submit();\r\n");
      out.write("\t} catch(e) {}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function setDefaultFont() {\r\n");
      out.write("\tvar sDefaultFont = '궁서';\r\n");
      out.write("\tvar nFontSize = 24;\r\n");
      out.write("\toEditors.getById[\"ir1\"].setDefaultFont(sDefaultFont, nFontSize);\r\n");
      out.write("}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
